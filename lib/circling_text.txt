--@name Circling Text
--@author Elias
--@shared
switch=function(p,t)
    if t[p]then 
        return t[p]()
    end
end
--add a utility function that removes the class by slowly ending each letter by angle
--add specific index control and linear equation support
--add custom model support
--link pac load library later
--add alpha functions
--fix flickering and reuse values
--todo asap: add lowercase letter support, forgot to before and entityID
--bug: rarely, setting the position creates a value that is 50 units off, possibility from setting the pos too early
if SERVER then
    local SText=class("SText")
    local modelTable={}
    modelTable.__index={
        ["_"]="underscore",
        [":"]="colon",
        [";"]="scolon",
        ["^"]="crt",
        ["%"]="pcnt",
        ["."]="prd",
        ["'"]="apost",
        [","]="com",
        ["!"]="xmark",
        ["?"]="qmark",
        ["("]="lpar",
        [")"]="rpar",
        ["<"]="lessthan",
        [">"]="greaterthan",
        ["/"]="div",
        ["*"]="ast",
        ["+"]="plu",
        ["-"]="min",
        ["["]="lbracket",
        ["]"]="rbracket"
    }
    local models={}
    setmetatable(models,modelTable)
    function SText:initialize(text,radius,position)
        self.text=text
        self.textTable={}
        self.position=position
        self.rotation=Angle()
        self.color=Color(255,255,255)
        self.alpha=255
        self.material=nil
        self.scale=Vector(1)
        self.angVel=Angle()
        self.radius=radius
        self.space=2
        self.parent=nil
        
        self.textTable[0]=holograms.create(self.position,self.rotation,"models/holograms/cplane.mdl",Vector(0))
        self.calcuText={}
        self.calcuRadius=nil
        self.calcuDegrees=nil
        self.calcuDegreeIndex=Vector()
        self.calcuRotation=Angle()
        return self
    end
    function SText:setParent(entity,attachment) --maybe combine both ang and pos parent into one template function
        attachment=attachment or nil
        self.parent=entity
        self.position=self.position-self.parent:getPos()        
        self.textTable[0]:setPos(self.parent:getPos()+self.position)
        self.textTable[0]:setParent(self.parent,attachment)
    end
    function SText:setPos(position)
        self.position=position
        self.textTable[0]:setPos(position)
    end
    function SText:getPos()
        return self.position
    end
    function SText:setAngles(rotation)
        self.rotation=rotation
    end
    function SText:getAngles()
        return self.rotation
    end
    function SText:setAngVel(angVel)
        self.angVel=angVel
    end
    function SText:getAngVel()
        return self.angVel
    end
    function SText:setScale(scale)
        self.scale=scale
    end
    function SText:getScale()
        return self.scale
    end
    function SText:setSpace(space)
        self.space=space
    end
    function SText:getSpace()
        return self.space
    end
    function SText:setMaterial(material)
        self.material=material
    end
    function SText:getMaterial()
        return self.material
    end
    function SText:setColor(color)
        self.color=color
    end
    function SText:getColor()
        return self.color
    end
    function SText:setText(text)
        self.text=text
    end
    function SText:getText()
        return self.text
    end
    function SText:setAlpha(alpha)
        self.alpha=alpha
    end
    function SText:getAlpha()
        return self.alpha
    end
    function letterModel(letter)
        local letter=string.lower(letter)
        local letterI=models[string.lower(letter)] 
        
        if letterI==nil and !string.find("eqwertyuiopasdfghjklzxcvbnm1234567890 ",string.lower(letter),0) then
            return "models/sprops/misc/alphanum/alphanum_qmark.mdl"
        elseif letterI==nil then
            letterI=letter
        end
        if letterI==" " then 
            return "models/sprops/misc/empty.mdl"
        end
        return "models/sprops/misc/alphanum/alphanum_"..letterI..".mdl"
    end
    function SText:clear()
        for i=1,table.count(self.calcuText),1 do
            self.textTable[i]:remove()
        end
    end
    function SText:updateText() --code slimming needed asap, too much code that does useless math
        self.calcuText=string.toTable(self.text)
        self.calcuRadius=self.radius/10
        self.calcuDegrees=360/(table.count(self.calcuText)+self.space)
        self.calcuDegreeIndex=Vector(0,20*self.calcuRadius,0)
        self.color[4]=self.alpha
        
        for i=1,table.count(self.calcuText),1 do --add queue to prevent instant text quota errors
            self.calcuDegreeIndex:rotate(Angle(0,self.calcuDegrees,0))
            self.textTable[i]=holograms.create(self.textTable[0]:getPos()+self.calcuDegreeIndex,Angle(0,self.calcuDegrees*i,0),letterModel(self.calcuText[i]),self.scale)
            self.textTable[i]:setColor(self.color)
            if self.material then
                self.textTable[i]:setMaterial(self.material)
            end
            self.textTable[i]:setParent(self.textTable[0])
        end
        hook.add("think","sv_rotation"..self.text,function() --add rotation crossover to avoid setting 64 bit limit, a little useless - but a nice touch
            self.calcuRotation=self.calcuRotation+self.angVel
            if self.parent then
                self.textTable[0]:setAngles(self.parent:localToWorldAngles(self.rotation+self.calcuRotation))
            else
                local pos,ang=localToWorld(self.position,self.calcuRotation,self.position,self.rotation)
                self.textTable[0]:setAngles(ang)
            end
        end)
    end
    return SText
else
    
end